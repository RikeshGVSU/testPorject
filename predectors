<h1>PingFederate Agentless Adapter Communication with Consent Application</h1>

<h2>Overview</h2>
<p>This document explains the interaction between PingFederate and the Consent Application using the Agentless Adapter. 
It covers the sequence of authentication and consent approval and highlights the available authentication methods for API communication.</p>

<hr>

<h2>Authentication Methods</h2>
<p>PingFederate Agentless Adapter supports <strong>three authentication methods</strong> for securing the <em>Attribute Pickup</em> and <em>Attribute Dropoff</em> API calls:</p>

<ul>
    <li><strong>HTTP Basic Authentication</strong> (IETF RFC 7617)
        <ul>
            <li>Uses a Base64-encoded username and password.</li>
            <li>Example:
                <pre>Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ=</pre>
            </li>
        </ul>
    </li>
    <li><strong>Certificate Authentication (Mutual TLS)</strong>
        <ul>
            <li>Requires the client (Consent Application) and server (PingFederate) to exchange certificates.</li>
            <li>Uses trusted CA certificates to establish a secure connection.</li>
        </ul>
    </li>
    <li><strong>Custom HTTP Header Variables</strong>
        <ul>
            <li>Uses <code>ping.uname</code> and <code>ping.pwd</code> headers for authentication.</li>
            <li>Example:
                <pre>
ping.uname: myUser
ping.pwd: myPassword
                </pre>
            </li>
        </ul>
    </li>
</ul>

<hr>

<h2>Sequence Flow Explanation</h2>

<h3>1. User Authentication via PingFederate</h3>
<ul>
    <li>The user initiates login via the TSP Application.</li>
    <li>PingFederate handles OIDC login and validates credentials.</li>
    <li>If authentication succeeds, PingFederate redirects the user to the Consent Application with a <strong>Reference ID (REF)</strong>.</li>
    <li>If authentication fails, an error message is displayed.</li>
</ul>

<h3>2. Attribute Pickup</h3>
<ul>
    <li>The Consent Application makes a <strong>GET</strong> request to PingFederate to retrieve user attributes using the provided REF.</li>
    <li><strong>Authentication options:</strong>
        <ul>
            <li>HTTP Basic Authentication</li>
            <li>Certificate Authentication (Mutual TLS)</li>
            <li>Custom HTTP Headers (<code>ping.uname</code> & <code>ping.pwd</code>)</li>
        </ul>
    </li>
    <li>PingFederate responds with user attributes in JSON format.</li>
</ul>

<h3>3. Attribute Dropoff</h3>
<ul>
    <li>The Consent Application sends a <strong>POST</strong> request to PingFederate to drop off user attributes and update the REF.</li>
    <li><strong>Authentication options:</strong>
        <ul>
            <li>HTTP Basic Authentication</li>
            <li>Certificate Authentication (Mutual TLS)</li>
            <li>Custom HTTP Headers (<code>ping.uname</code> & <code>ping.pwd</code>)</li>
        </ul>
    </li>
    <li>PingFederate returns a new REF.</li>
</ul>

<h3>4. User Redirection to TSP Application</h3>
<ul>
    <li>The Consent Application redirects the user back to PingFederate with the new REF.</li>
    <li>PingFederate then redirects the user to the original TSP Application.</li>
</ul>

<hr>

<h2>Authentication Methods Summary</h2>
<table border="1" cellpadding="5" cellspacing="0">
    <thead>
        <tr>
            <th>Call Type</th>
            <th>Authentication Options Available</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td><strong>Attribute Pickup</strong></td>
            <td>HTTP Basic Authentication, Mutual TLS, Custom HTTP Headers (ping.uname & ping.pwd)</td>
        </tr>
        <tr>
            <td><strong>Attribute Dropoff</strong></td>
            <td>HTTP Basic Authentication, Mutual TLS, Custom HTTP Headers (ping.uname & ping.pwd)</td>
        </tr>
    </tbody>
</table>

<hr>

<h2>Key Considerations</h2>
<ul>
    <li>Ensure that the chosen authentication method aligns with the organization's security policies.</li>
    <li>Mutual TLS requires additional setup for certificate exchange and trust management.</li>
    <li>Custom HTTP headers can be used if Basic Authentication is not preferred.</li>
</ul>



@startuml
skinparam backgroundColor White
skinparam sequenceArrowColor Black
skinparam participant {
    BackgroundColor<<PingFederate>> LightYellow
    BackgroundColor<<ConsentApplication>> LightPink
    BackgroundColor<<TSPApplication>> LightGreen
    BackgroundColor<<User>> LightBlue
    BorderColor Black
    FontColor Black
}

actor User #LightBlue
participant TSPApplication #LightGreen
participant PingFederate <<PingFederate>> #LightYellow
participant ConsentApplication <<ConsentApplication>> #LightPink

== User Login Process ==
User -> TSPApplication: Logs in with credentials (POST)
TSPApplication -> PingFederate: OIDC login request (Redirect)
PingFederate -> PingFederate: Validates user credentials

alt Authentication Successful
    PingFederate -> ConsentApplication: Redirects with REF (Redirect)
else Authentication Failed
    PingFederate -> User: Displays Error Page
end

== Attribute Pickup Process ==
ConsentApplication -> PingFederate: Attribute Pickup Request (GET with REF)
alt Authentication Required
    note right of PingFederate: Authentication Options:
    * HTTP Basic Authentication
    * Mutual TLS (mTLS)
    * Custom HTTP Headers
end
PingFederate --> ConsentApplication: Returns User Attributes (Response)

== Consent Decision ==
alt Consent Already Exists
    ConsentApplication -> PingFederate: Attribute Dropoff (POST)
    PingFederate --> ConsentApplication: Returns New REF (Response)
    ConsentApplication -> PingFederate: Redirects back with REF (Redirect)
    PingFederate -> TSPApplication: Redirects user to TSP Application
else Consent Not Exists
    ConsentApplication -> User: Display Consent UI (User Interaction)
    User -> ConsentApplication: Submits Consent Decision (POST)
    
    alt User Agrees
        ConsentApplication -> PingFederate: Attribute Dropoff (POST)
        PingFederate --> ConsentApplication: Returns New REF (Response)
        ConsentApplication -> PingFederate: Redirects back with REF (Redirect)
        PingFederate -> TSPApplication: Redirects user to TSP Application
    else User Denies
        ConsentApplication -> PingFederate: Attribute Dropoff (POST)
        PingFederate --> ConsentApplication: Returns New REF (Response)
        ConsentApplication -> PingFederate: Redirects back with REF (Redirect)
        PingFederate -> User: Displays Error Page
    end
end

@enduml
